#include <iostream>
using namespace std;

// Node class definition
class Node {
public:
    int key; // Key of the node
    Node *left; // Pointer to the left child node
    Node *right; // Pointer to the right child node
    int height; // Height of the node

    // Node constructor
    Node(int key) {
        this->key = key;
        this->left = NULL;
        this->right = NULL;
        this->height = 1; // Height is initially set to 1
    }
};

// AVLTree class definition
class AVLTree {
public:
    // Function to get the height of a node
    int getHeight(Node *n) {
        if (n == NULL) {
            return 0;
        }
        return n->height;
    }

    // Function to create a new node
    Node *createNode(int key)
	{
        return new Node(key);
    }

    // Function to get the maximum of two integers
    int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    // Function to get the balance factor of a node
    int getBalanceFactor(Node *n) {
        if (n == NULL) {
            return 0;
        }
        return getHeight(n->left) - getHeight(n->right);
    }

    // Function to perform a right rotation on a subtree rooted with y
    Node *rightRotate(Node *y) {
        Node *x = y->left;
        Node *T2 = x->right;

        // Perform rotation
        x->right = y;
        y->left = T2;

        // Update heights
        x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
        y->height = max(getHeight(y->right), getHeight(y->left)) + 1;

        // Return new root
        return x;
    }

    // Function to perform a left rotation on a subtree rooted with x
    Node *leftRotate(Node *x) {
        Node *y = x->right;
        Node *T2 = y->left;

        // Perform rotation
        y->left = x;
        x->right = T2;

        // Update heights
        x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
        y->height = max(getHeight(y->right), getHeight(y->left)) + 1;

        // Return new root
        return y;
    }

    // Function to insert a node with given key in the subtree rooted with node and returns the new root of the subtree.
    Node *insert(Node *node, int key)
	{
        // Normal BST insertion
        if (node == NULL)
		{
            return createNode(key);
        }

        if (key < node->key)
		{
            node->left = insert(node->left, key);
        }
		else if (key > node->key)
		{
            node->right = insert(node->right, key);
        }

        // Update height of this ancestor node
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));

        // Get the balance factor
        int bf = getBalanceFactor(node);

        // If this node becomes unbalanced, then there are 4 cases

        // Left Left Case
        if (bf > 1 && key < node->left->key)
		{
            return rightRotate(node);
        }

        // Right Right Case
        if (bf < -1 && key > node->right->key)
		{
            return leftRotate(node);
        }

        // Left Right Case
        if (bf > 1 && key > node->left->key)
		{
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        // Right Left Case
        if (bf < -1 && key < node->right->key)
		{
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        // Return the (unchanged) node pointer
        return node;
    }

    // Function to delete a node with the given key from the subtree rooted with 'root' and returns the new root of the subtree.
    Node *deleteNode(Node *root, int key)
	{
        // Normal BST deletion
        if (root == NULL)
		{
            return root;
        }

        // If the key to be deleted is smaller than the root's key, then it lies in left subtree
        if (key < root->key)
		{
            root->left = deleteNode(root->left, key);
        }

        // If the key to be deleted is greater than the root's key, then it lies in right subtree
        else if (key > root->key)
		{
            root->right = deleteNode(root->right, key);
        }

        // If key is same as root's key, then this is the node to be deleted
        else
		{
            // node with only one child or no child
            if (root->left == NULL)
			{
                Node *temp = root->right;
                delete root;
                return temp;
            }
			else if (root->right == NULL)
			{
            	Node *temp = root->left;
                delete root;
                return temp;
            }

            // node with two children: get the inorder successor (smallest in the right subtree)
            Node *minValueNode = root->right;
            while (minValueNode->left != NULL)
			{
                minValueNode = minValueNode->left;
            }

            // copy the inorder successor's content to this node
            root->key = minValueNode->key;

            // delete the inorder successor
            root->right = deleteNode(root->right, minValueNode->key);
        }

        // if the tree had only one node then return
        if (root == NULL)
		{
            return root;
        }

        // update height of the current node
        root->height = 1 + max(getHeight(root->left), getHeight(root->right));

        // get the balance factor
        int bf = getBalanceFactor(root);

        // if this node becomes unbalanced, then there are 4 cases

        // Left Left Case
        if (bf > 1 && getBalanceFactor(root->left) >= 0)
		{
            return rightRotate(root);
        }

        // Left Right Case
        if (bf > 1 && getBalanceFactor(root->left) < 0)
		{
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        // Right Right Case
        if (bf < -1 && getBalanceFactor(root->right) <= 0)
		{
            return leftRotate(root);
        }

        // Right Left Case
        if (bf < -1 && getBalanceFactor(root->right) > 0)
		{
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        // return the (unchanged) node pointer
        return root;
    }

    // Function to search a node with given key in a AVL tree. It returns the node if found, else returns NULL.
    Node *search(Node *root, int key) {
        if (root == NULL) {
            cout << "Tree is empty....!" << endl;
            return root;
        } else {
            Node *curr = root;
            while (curr != NULL) {
                if (key > curr->key) {
                    curr = curr->right;
                } else if (key < curr->key) {
                    curr = curr->left;
                } else {
                    return curr;
                }
            }
            return NULL; // Key not found
        }
    }

    // Function to print pre-order traversal of the tree.
    void preOrder(Node *root) {
        if (root != NULL) {
            cout << root->key << " ";
            preOrder(root->left);
            preOrder(root->right);
        }
    }
};

int main() {
    AVLTree avlTree;
    Node *root = NULL;

    // Inserting nodes into the AVL tree
    root = avlTree.insert(root, 1);
    root = avlTree.insert(root, 2);
    root = avlTree.insert(root, 4);
    root = avlTree.insert(root, 5);
    root = avlTree.insert(root, 6);
    root = avlTree.insert(root, 3);

    // Displaying the tree using pre-order traversal
    cout << "Preorder traversal of the constructed AVL tree is: ";
    avlTree.preOrder(root);
    cout << endl;

    // Deleting a node from the tree
    int keyToDelete;
    cout << "Enter the key to delete: ";
    cin >> keyToDelete;
    root = avlTree.deleteNode(root, keyToDelete);

    // Displaying the tree after deletion
    cout << "Preorder traversal after deletion: ";
    avlTree.preOrder(root);
    cout << endl;

    // Searching for a key in the tree
    int keyToSearch;
    cout << "Enter the key to search: ";
    cin >> keyToSearch;
    Node *result = avlTree.search(root, keyToSearch);
    if (result != NULL) {
        cout << "Key found: " << result->key << endl;
    } else {
        cout << "Key not found" << endl;
    }

    return 0;
}
